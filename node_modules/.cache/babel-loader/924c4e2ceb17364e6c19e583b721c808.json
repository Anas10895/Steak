{"ast":null,"code":"var _jsxFileName = \"/Users/anasshar/Documents/GitHub/SEI/projects/Steak/cafe/Steak/coffee/src/components/Map.jsx\";\nimport React from 'react';\nimport { Map, GoogleApiWrapper, Marker } from 'google-maps-react';\nexport class MapContainer extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      userLocation: {\n        lat: 32,\n        lng: 32\n      },\n      datas: [],\n      loading: true\n    };\n\n    this.displayMarkers = () => {\n      return this.state.datas.map((data, index) => {\n        return React.createElement(Marker, {\n          key: index,\n          id: index,\n          position: {\n            lat: data.store_coordinates.lat,\n            lng: data.store_coordinates.long\n          },\n          onClick: () => console.log(\"You clicked me!\"),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 28\n          },\n          __self: this\n        });\n      });\n    };\n  }\n\n  componentDidMount(props) {\n    fetch('http://localhost:2551/api/v1/stores/').then(response => response.json()).then(datas => this.setState({\n      datas: datas !== undefined ? datas : \"\"\n    }));\n    navigator.geolocation.getCurrentPosition(position => {\n      const _position$coords = position.coords,\n            latitude = _position$coords.latitude,\n            longitude = _position$coords.longitude;\n      this.setState({\n        stores: [{\n          lat: 47.49855629475769,\n          lng: -122.14184416996333\n        }, {\n          latitude: 47.359423,\n          longitude: -122.021071\n        }, {\n          latitude: 47.2052192687988,\n          longitude: -121.988426208496\n        }, {\n          latitude: 47.6307081,\n          longitude: -122.1434325\n        }, {\n          latitude: 47.3084488,\n          longitude: -122.2140121\n        }, {\n          latitude: 47.5524695,\n          longitude: -122.0425407\n        }],\n        userLocation: {\n          lat: latitude,\n          lng: longitude\n        },\n        loading: false\n      });\n    }, () => {\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  render() {\n    const _this$state = this.state,\n          loading = _this$state.loading,\n          userLocation = _this$state.userLocation;\n    const google = this.props.google;\n\n    if (loading) {\n      return null;\n    }\n\n    return React.createElement(Map, {\n      google: google,\n      initialCenter: userLocation,\n      zoom: 15,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, console.log(this.state.datas), console.log(this.state.stores), React.createElement(Marker, {\n      onClick: () => console.log(\"You clicked me!\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }), this.displayMarkers());\n  }\n\n}\nexport default GoogleApiWrapper({\n  apiKey: process.env.REACT_APP_API\n})(MapContainer);","map":{"version":3,"sources":["/Users/anasshar/Documents/GitHub/SEI/projects/Steak/cafe/Steak/coffee/src/components/Map.jsx"],"names":["React","Map","GoogleApiWrapper","Marker","MapContainer","Component","state","userLocation","lat","lng","datas","loading","displayMarkers","map","data","index","store_coordinates","long","console","log","componentDidMount","props","fetch","then","response","json","setState","undefined","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","stores","render","google","apiKey","process","env","REACT_APP_API"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Map, GoogleApiWrapper, Marker } from 'google-maps-react';\nexport class MapContainer extends React.Component {\n  state = { userLocation: { lat: 32, lng: 32 }, datas:[],  loading: true };\n  componentDidMount(props) {\n    fetch('http://localhost:2551/api/v1/stores/').then(response => response.json()).then(datas => this.setState({ datas : datas !== undefined ? datas : \"\"   }));\n    navigator.geolocation.getCurrentPosition(\n      position => {\n        const { latitude, longitude } = position.coords;\n        this.setState({\n          stores: [{ lat: 47.49855629475769, lng: -122.14184416996333 },\n          { latitude: 47.359423, longitude: -122.021071 },\n          { latitude: 47.2052192687988, longitude: -121.988426208496 },\n          { latitude: 47.6307081, longitude: -122.1434325 },\n          { latitude: 47.3084488, longitude: -122.2140121 },\n          { latitude: 47.5524695, longitude: -122.0425407 }],\n          userLocation: { lat: latitude, lng: longitude },\n          loading: false\n        });\n      },\n      () => {\n        this.setState({ loading: false });\n      }\n    );\n  }\n  displayMarkers = () => {\n    return this.state.datas.map((data, index) => {\n      return <Marker key={index} id={index} position={{\n        lat: data.store_coordinates.lat,\n        lng: data.store_coordinates.long\n      }}\n        onClick={() => console.log(\"You clicked me!\")} />\n    })\n  }\n  render() {\n    const { loading, userLocation } = this.state;\n    const { google } = this.props;\n    if (loading) {\n      return null;\n    }\n    return (\n      <Map google={google} initialCenter={userLocation} zoom={15}>\n                {console.log(this.state.datas)}\n                {console.log(this.state.stores)}\n        <Marker onClick={() => console.log(\"You clicked me!\")} />\n        {this.displayMarkers()}\n      </Map>\n    );\n  }\n}\nexport default GoogleApiWrapper({\n  apiKey: process.env.REACT_APP_API\n})(MapContainer);"]},"metadata":{},"sourceType":"module"}