{"ast":null,"code":"var _jsxFileName = \"/Users/anasshar/Documents/GitHub/SEI/projects/Steak/cafe/Steak/coffee/src/components/Cart.jsx\";\nimport React, { Component } from \"react\";\nimport { Table, Button } from \"react-bootstrap\";\nexport default class Cart extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      cart: this.props.cart\n    };\n  }\n\n  componentDidMount() {\n    var cart = JSON.parse(localStorage.getItem(\"product_cart\"));\n    let temp = this.state.cart;\n    temp.push(cart);\n    this.setState({\n      cart: temp\n    });\n  } //\n\n\n  render() {\n    var cart = JSON.parse(localStorage.getItem(\"product_cart\"));\n    console.log(cart); //     let group = cart.reduce((r, a) => {\n    //       r[a.id] = [...(r[a.id] || []), a];\n    //       return r;\n    //     }, {});\n    //     let cartelm=[];\n    // let j = 0\n    //     let total = [];\n    //     for (let i in group) {\n    //       cartelm.push(group[i].map(elm => {\n    //         let price = elm.price * (group[i].length );\n    //         total.push(price)\n    //         if (group[i].indexOf(elm) == 0) {\n    //             j++\n    //           return (\n    //             <tr key={elm.id}>\n    //               <td>{j}</td>\n    //               <td>{elm.name}</td>\n    //               <td>{group[i].length }</td>\n    //               <td>{price}</td>\n    //             </tr>\n    //       );\n    //         }\n    //       }));\n    //     }\n    //     const reducer = (accumulator, currentValue) => accumulator + currentValue;\n    //    let sum= total.reduce(reducer)\n    //     let elm =cartelm.map((elm)=>{\n    //         return elm\n    //     })\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/anasshar/Documents/GitHub/SEI/projects/Steak/cafe/Steak/coffee/src/components/Cart.jsx"],"names":["React","Component","Table","Button","Cart","state","cart","props","componentDidMount","JSON","parse","localStorage","getItem","temp","push","setState","render","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,iBAA9B;AACA,eAAe,MAAMC,IAAN,SAAmBH,SAAnB,CAA6B;AAAA;AAAA;AAAA,SAC1CI,KAD0C,GAClC;AACNC,MAAAA,IAAI,EAAE,KAAKC,KAAL,CAAWD;AADX,KADkC;AAAA;;AAI1CE,EAAAA,iBAAiB,GAAG;AAClB,QAAIF,IAAI,GAAGG,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,cAArB,CAAX,CAAX;AACA,QAAIC,IAAI,GAAG,KAAKR,KAAL,CAAWC,IAAtB;AACAO,IAAAA,IAAI,CAACC,IAAL,CAAUR,IAAV;AACA,SAAKS,QAAL,CAAc;AAAET,MAAAA,IAAI,EAAEO;AAAR,KAAd;AACD,GATyC,CAU1C;;;AACAG,EAAAA,MAAM,GAAG;AACP,QAAIV,IAAI,GAAGG,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,cAArB,CAAX,CAAX;AACJK,IAAAA,OAAO,CAACC,GAAR,CAAYZ,IAAZ,EAFW,CAGX;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;;AACI,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAwBD;;AAvEyC","sourcesContent":["import React, { Component } from \"react\";\nimport { Table, Button } from \"react-bootstrap\";\nexport default class Cart extends Component {\n  state = {\n    cart: this.props.cart\n  };\n  componentDidMount() {\n    var cart = JSON.parse(localStorage.getItem(\"product_cart\"));\n    let temp = this.state.cart;\n    temp.push(cart);\n    this.setState({ cart: temp });\n  }\n  //\n  render() {\n    var cart = JSON.parse(localStorage.getItem(\"product_cart\"));\nconsole.log(cart)\n//     let group = cart.reduce((r, a) => {\n  \n//       r[a.id] = [...(r[a.id] || []), a];\n//       return r;\n//     }, {});\n//     let cartelm=[];\n// let j = 0\n//     let total = [];\n//     for (let i in group) {\n//       cartelm.push(group[i].map(elm => {\n//         let price = elm.price * (group[i].length );\n//         total.push(price)\n//         if (group[i].indexOf(elm) == 0) {\n//             j++\n//           return (\n//             <tr key={elm.id}>\n               \n//               <td>{j}</td>\n//               <td>{elm.name}</td>\n//               <td>{group[i].length }</td>\n//               <td>{price}</td>\n//             </tr>\n//       );\n//         }\n        \n//       }));\n     \n//     }\n//     const reducer = (accumulator, currentValue) => accumulator + currentValue;\n//    let sum= total.reduce(reducer)\n//     let elm =cartelm.map((elm)=>{\n//         return elm\n//     })\n    return (\n      <div>\n        {/* <Table striped bordered hover>\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>Item</th>\n              <th>Quantity</th>\n              <th>Price</th>\n            </tr>\n          </thead>\n          <tbody>\n            {elm}\n            <tr>\n              <td>Price</td>\n              <td colSpan=\"3\">\n              {sum}\n              </td>\n            </tr>\n          </tbody>\n        </Table>\n        <Button> Check Out </Button> */}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}